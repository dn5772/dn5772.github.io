<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Shell on 대니짱</title>
        <link>https://dn5772.github.io/tags/shell/</link>
        <description>Recent content in Shell on 대니짱</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Fri, 17 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://dn5772.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>7-shell-code</title>
        <link>https://dn5772.github.io/p/7-shell-code/</link>
        <pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate>
        
        <guid>https://dn5772.github.io/p/7-shell-code/</guid>
        <description>&lt;h2 id=&#34;7-쉘-코드&#34;&gt;
    &lt;a href=&#34;#7-%ec%89%98-%ec%bd%94%eb%93%9c&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    7-쉘 코드
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;“/bin/sh” 문자열을 임의의 메모리에 위치시킨다.&lt;/li&gt;
&lt;li&gt;NULL문자(=0) 1 바이트를 “/bin/sh”뒤에 붙여준다. 즉, “/bin/sh\0”이 되도록 한다.&lt;/li&gt;
&lt;li&gt;/bin/sh 문자열 주소값을 불러와서 name[0]에 할당한다. 즉, name[]={“sh”,0} 와 name[]={“/bin/sh”,0}는 동일하기 때문에 sh 문자열을 별도로 추가할 필요는 없다.&lt;/li&gt;
&lt;li&gt;0 (=null)값을 name[1]에 해당하는 주소에 할당한다.&lt;/li&gt;
&lt;li&gt;0xb(11)를 EAX 레지스터에 저장한다.&lt;/li&gt;
&lt;li&gt;/bin/sh 문자열의 주소를 EBX 레지스터에 저장한다.&lt;/li&gt;
&lt;li&gt;name 배열의 주소를 ECX 레지스터에 저장한다.&lt;/li&gt;
&lt;li&gt;0x0을 EDX 레지스터에 저장한다.&lt;/li&gt;
&lt;li&gt;int $0x80 명령을 실행한다.&lt;/li&gt;
&lt;li&gt;0x1 (exit 시스템콜 번호)을 EAX 레지스터에 저장한다.&lt;/li&gt;
&lt;li&gt;0x0을 EBX 레지스터에 복사한다.&lt;/li&gt;
&lt;li&gt;int $0x80 명령을 실행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런식으로 쉘이 실행 됨&lt;/p&gt;
&lt;h3 id=&#34;스택-데이터영역-사용-안하고-codetext영역만-사용해서-쉘-실행&#34;&gt;
    &lt;a href=&#34;#%ec%8a%a4%ed%83%9d-%eb%8d%b0%ec%9d%b4%ed%84%b0%ec%98%81%ec%97%ad-%ec%82%ac%ec%9a%a9-%ec%95%88%ed%95%98%ea%b3%a0-codetext%ec%98%81%ec%97%ad%eb%a7%8c-%ec%82%ac%ec%9a%a9%ed%95%b4%ec%84%9c-%ec%89%98-%ec%8b%a4%ed%96%89&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    스택, 데이터영역 사용 안하고 code(text)영역만 사용해서 쉘 실행
&lt;/h3&gt;&lt;p&gt;1-12번 까지의 과정에서 &amp;ldquo;/bin/sh&amp;rdquo; 문자열의 시작 주소만 알면 text만으로 실행하도록 text를 추출할 수 있음&lt;/p&gt;
&lt;h2 id=&#34;1번-방법&#34;&gt;
    &lt;a href=&#34;#1%eb%b2%88-%eb%b0%a9%eb%b2%95&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    1번 방법
&lt;/h2&gt;&lt;p&gt;레이블(.LC0)을 설정해서 문자열의 시작주소를 추출&lt;/p&gt;
&lt;p&gt;=&amp;gt; 이 방법으로 추출한 shell code는 .LC0의 주소값이 하드코딩 되어버림&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제 &amp;ldquo;/bin/sh&amp;rdquo; 문자열 주소와는 다른 주소로 접근해서 실패&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2번-방법&#34;&gt;
    &lt;a href=&#34;#2%eb%b2%88-%eb%b0%a9%eb%b2%95&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    2번 방법
&lt;/h2&gt;&lt;p&gt;트렘펄링 방법으로 실행시에 &amp;ldquo;/bin/sh&amp;rdquo; 시작주소를 확보&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
